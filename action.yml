name: Git tag semver action
description: |
  This action manages semantic versioning git tags. What it does depend on the version bump type provided by the
  user.
inputs:
  version:
    description: The version bump type. Either "major", "minor" or "patch".
    required: true
  dry-run:
    description: Whether to tag.
    required: false
outputs:
  tags:
    description: |
      The tags applied to the ref as a JSON array. These will be populated even though dry-run is selected.
    value: ${{ steps.get-new-version-tags.outputs.tags }}
runs:
  using: "composite"
  steps:
    - id: get-latest-tag
      shell: bash
      run: |
        mapfile remote_tags < <(git ls-remote --tags origin "v*.*.*")
        if test "${#remote_tags[@]}" -eq 0; then
          latest_tag=v0.0.0
        else
          latest_tag=$(echo "${remote_tags[@]}" | cut -d '/' -f 3 | sort --reverse | head -1)
        fi
        
        # We remove the v because it's not a semver with it.
        echo "latest-tag=${latest_tag:1}" >> "${GITHUB_OUTPUT}"
    - id: semver-increment
      uses: docker://public.ecr.aws/infrastructure-blocks/semver-increment-action:v1
      with:
        version: ${{ steps.get-latest-tag.outputs.latest-tag }}
        type: ${{ inputs.version }}
    - id: get-new-version-tags
      shell: bash
      run: |
        major_tag="v${{ steps.semver-increment.outputs.major }}"
        minor_tag="v${{ steps.semver-increment.outputs.major }}.${{ steps.semver-increment.outputs.minor }}"
        full_tag="v${{ steps.semver-increment.outputs.version }}"
        
        echo "tags=[\"${major_tag}\",\"${minor_tag}\",\"${full_tag}\"]" >> "${GITHUB_OUTPUT}"
    - shell: bash
      run: |
        mapfile -t tags < <(echo '${{ steps.get-new-version-tags.outputs.tags }}' | jq '.[]' -r)
        for tag in "${tags[@]}"; do
          # We use force because some tags will likely move.
          git tag --force "${tag}"
        done
    - if: ${{ inputs.dry-run != 'true' }}
      shell: bash
      run: |
        mapfile -t tags < <(echo '${{ steps.get-new-version-tags.outputs.tags }}' | jq '.[]' -r)
        for tag in "${tags[@]}"; do
          # We force push because some tags will likely move.
          git push origin --force "${tag}"
        done
